import React, {Component} from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import color from '../color';

const RadioContainer = styled.div`
  ${props => props.horizontal ? 'display: flex;' : ''}

  margin: 5px;
  position: relative;
  text-align: left;
  ${props => props.border ? `padding: 15px 7px; border: 1px solid ${color.grey_accent_1}; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1);` : ''}

  label {
    font-weight: 400 !important;
  }

  [type="radio"]:checked,
  [type="radio"]:not(:checked) {
    position: absolute;
    left: -9999px;
  }
  [type="radio"]:checked + label,
  [type="radio"]:not(:checked) + label
  {
    position: relative;
    padding-left: 28px;
    cursor: pointer;
    line-height: 20px;
    display: inline-block;
    color: ${color.grey_main};
  }
  [type="radio"]:checked + label:before,
  [type="radio"]:not(:checked) + label:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 20px;
    height: 20px;
    border:  ${props => props.colorStyle === 'purple' ? `1px solid ${color.blue_accent}` : `none`};
    border-radius: 100%;
    ${props => props.colorStyle === 'purple' ? '' : `background: linear-gradient(180deg, ${color.grey_accent_2} 0%, ${color.grey_accent_1} 100%);`}
  }

  [type="radio"]:checked + label:before {
    font-family: 'icomoon' !important;
    content: ${props => props.colorStyle === 'purple' ? '' : '"\\e91c" !important'};
    border: 1px solid ${props => props.colorStyle === 'purple' ? `${color.blue_accent}` : 'none'};
    text-align: center;
    color: white;
    ${props => props.colorStyle === 'purple' ? `background: ${color.white} ` : `background: linear-gradient(180deg, ${color.orange_accent} 0%, ${color.orange_main} 100%);`}
  }

  [type="radio"]:checked + label:after,
  [type="radio"]:not(:checked) + label:after {
    content: '';
    width: 12px;
    height: 12px;
    ${props => props.colorStyle === 'purple' ? `background: ${color.blue_accent};` : ``}
    position: absolute;
    top: 4px;
    left: 4px;
    border-radius: 100%;
    -webkit-transition: all 0.2s ease;
    transition: all 0.2s ease;
  }
  [type="radio"]:not(:checked) + label:after {
    opacity: 0;
    -webkit-transform: scale(0);
    transform: scale(0);
  }
  [type="radio"]:checked + label:after {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
  }
`;

const Item = styled.div`
  margin: ${props => props.horizontal ? '0.5em' : '0.5em 0'};
`;

export default class Radio extends Component {

  static propTypes = {
    /** qa attribute */
    testId: PropTypes.string,
    /** groupname attribute */
    groupname: PropTypes.string,
    /** override style */
    style: PropTypes.object,
    /** children node */
    children: PropTypes.node,
    /** border of the radiobox */
    border: PropTypes.bool,
    /** if passed this will be used to generate checkbox {id value name checked disabled} */
    content: PropTypes.array,
    /** on change */
    onChange: PropTypes.func,
    /** purple or orange **/
    colorStyle: PropTypes.string,
    /** list all radio button horizontally if horizontal passed*/
    horizontal: PropTypes.bool
  };

  static defaultProps = {
    style: {},
    colorStyle: 'orange',
    testId: 'Radio'
  };

  constructor(props) {
    super(props);
    this.state={
      groupname: props.groupname ? props.groupname : Math.random(),
    };
  }

  getRadioBoxItem(item) {
    const {onChange, horizontal} = this.props;
    const {name, id, value, checked, disabled} = item;
    const key = id ? id : (name + value + checked).split(' ').join('').toLowerCase();
    return (<Item key={key} horizontal={horizontal}>
      <input
        ref={'radio' + key}
        type="radio"
        id={'radio' + key}
        defaultChecked={checked}
        onChange={() => {
          onChange(item);
        }}
        disabled={disabled}
        name={this.state.groupname}
      />
      <label htmlFor={'radio' + key} title={name}>{name}</label>
    </Item>);
  }

  render() {
    const {border, content, style, children, colorStyle, horizontal} = this.props;
    if (content) return <RadioContainer data-qa={this.props.testId} horizontal={horizontal} border={border} style={style} colorStyle={colorStyle}>{content.map(this.getRadioBoxItem.bind(this))}</RadioContainer>;
    if (!content) return <RadioContainer data-qa={this.props.testId} border={border} style={style} colorStyle={colorStyle}>{children}</RadioContainer>;
  }
}
