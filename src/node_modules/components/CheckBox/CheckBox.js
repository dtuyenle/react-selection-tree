import React, {Component} from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import color from '../color';

const CheckBoxContainer = styled.div`
  margin: 5px;
  position: relative;
  text-align: left;
  ${props => props.border ? `padding: 15px 7px; border: 1px solid ${color.grey_accent_1}; border-radius: 5px; box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1);` : ''};
  label {
    font-weight: 400 !important;
  }
  [type="checkbox"]:checked,
  [type="checkbox"]:not(:checked) {
      position: absolute;
      left: -9999px;
  }
  [type="checkbox"]:checked + label,
  [type="checkbox"]:not(:checked) + label
  {
    position: relative;
    padding-left: 28px;
    cursor: pointer;
    line-height: 20px;
    display: inline-block;
    color: ${color.grey_main};
  }
  [type="checkbox"]:checked + label:before,
  [type="checkbox"]:not(:checked) + label:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 20px;
    height: 20px;
    border:  ${props => props.colorStyle === 'purple' ? `1px solid ${color.blue_accent}` : `none`};
    ${props => props.colorStyle === 'purple' ? '' : `background: linear-gradient(180deg, ${color.grey_accent_2} 0%, ${color.grey_accent_1} 100%);`}
    border-radius: ${props => props.borderRadius ? props.borderRadius : '5px'};
  }
  [type="checkbox"]:checked + label:after,
  [type="checkbox"]:not(:checked) + label:after {
    content: '';
    width: 12px;
    height: 12px;
    ${props => props.colorStyle === 'purple' ? `background: ${color.blue_accent}; border-radius: 2px;` : ``}
    position: absolute;
    top: 4px;
    left: 4px;
    -webkit-transition: all 0.2s ease;
    transition: all 0.2s ease;
  }
  [type="checkbox"]:not(:checked) + label:after {
    opacity: 0;
    -webkit-transform: scale(0);
    transform: scale(0);
  }
  [type="checkbox"]:checked + label:after {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
  }
  [type="checkbox"]:checked + label:before {
    content: ${props => props.colorStyle === 'purple' ? '' : '"\\e91c" !important'};
    font-family: 'icomoon' !important;
    border:  ${props => props.colorStyle === 'purple' ? `1px solid ${color.blue_accent}` : `none`};
    text-align: center;
    color: white;
    ${props => props.colorStyle === 'purple' ? '' : `background: linear-gradient(180deg, ${color.orange_accent} 0%, ${color.orange_main} 100%);`}
    border-radius: ${props => props.borderRadius ? props.borderRadius : '5px'};
  }
`;

const Item = styled.div`
  margin: 0.5em 0;
`;

export default class CheckBox extends Component {

  static propTypes = {
    /** qa attribute */
    testId: PropTypes.string,
    /** groupname attribute */
    groupname: PropTypes.string,
    /** override style */
    style: PropTypes.object,
    /** children node */
    children: PropTypes.node,
    /** border of the checkbox */
    border: PropTypes.bool,
    /** if passed this will be used to generate checkbox {id value name checked disabled onClick} */
    content: PropTypes.array,
    /** on change */
    onChange: PropTypes.func,
    /** purple or orange **/
    colorStyle: PropTypes.string,
    /** border radius */
    borderRadius: PropTypes.string
  };

  static defaultProps = {
    style: {},
    colorStyle: 'orange',
    testId: 'CheckBox'
  };

  constructor(props) {
    super(props);
    this.state={
      groupname: props.groupname ? props.groupname : Math.random(),
      selected: [],
      border: this.props.border,
    };

    this.state.selected = this.props.content ? this.props.content.filter(item => item.checked === true) : [];
  }

  getCheckBoxItem(item) {
    const {onChange} = this.props;
    const {name, id, value, checked, disabled} = item;
    const key = id ? id : (name + value + checked).split(' ').join('').toLowerCase();
    return (<Item key={key}>
      <input
        ref={'checkbox' + key}
        type="checkbox"
        id={'checkbox' + key}
        disabled={disabled}
        onChange={(event) => {
          const checked = event.target.checked;
          const selected = this.state.selected.filter(item_ => item_.value !== item.value);
          if (checked) {
            selected.push(item);
          }
          this.setState({selected: selected}, () => { onChange(selected, value, checked); });
          if (item.onClick) { item.onClick(item, event.target.checked); }
        }}
        defaultChecked={checked}
        name={this.state.groupname}
      />
      <label htmlFor={'checkbox' + key} title={name}>{name}</label>
    </Item>);
  }

  render() {
    const {borderRadius, content, border, colorStyle, children, style} = this.props;

    if (content) { return <CheckBoxContainer data-qa={this.props.testId} borderRadius={borderRadius} colorStyle={colorStyle} border={border} style={style}>{content.map(this.getCheckBoxItem.bind(this))}</CheckBoxContainer>; }
    if (!content) { return <CheckBoxContainer data-qa={this.props.testId} borderRadius={borderRadius} colorStyle={colorStyle} border={border} style={style}>{children}</CheckBoxContainer>; }
  }
}
