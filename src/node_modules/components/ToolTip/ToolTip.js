import React, {Component} from 'react';
import PropTypes from 'prop-types';
import Popover from 'react-bootstrap/lib/Popover';
import OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger';
import {uniqueId} from 'lodash';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const Tooltip = styled.div`
  border-radius: 2px;
  width: 100%;
  z-index: 9999999;
  display: inline;

  span {
    border-radius: 2px;
  }
`;

const TooltipOverlay = styled.div`
  z-index: 2000;
  height: auto !important;
  font-size: 1em;
  padding: 8px 10px !important;
`;

export default class ToolTip extends Component {

  static propTypes = {
    id: PropTypes.string,
    trigger: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
    placement: PropTypes.string,
    popOverStyle: PropTypes.object,
    onEnter: PropTypes.func,
    node: PropTypes.node.isRequired,
    data: PropTypes.node.isRequired,
    rootClose: PropTypes.bool,
    rootCloseHack: PropTypes.bool,
    closeAfterMillisecond: PropTypes.number,
    showPopup: PropTypes.bool,
    onExit: PropTypes.func,
  };

  static defaultProps = {
    id: uniqueId(),
    placement: 'bottom',
    rootClose: false,
    showPopup: true,
  };

  constructor(props) {
    super(props);
    this.state = {
      key: Math.random(),
      initialClick: true,
      handleDocumentClick: null
    };
    this.state.handleDocumentClick = this.handleDocumentClick.bind(this);
  }

  componentDidMount() {
    const {trigger, rootCloseHack} = this.props;
    if (rootCloseHack && trigger === 'click') {
      document.addEventListener('click', this.state.handleDocumentClick, false);
    }
  }

  componentWillUnmount() {
    document.removeEventListener('click', this.state.handleDocumentClick, false);
  }

  onEnter() {
    const {onEnter, closeAfterMillisecond} = this.props;
    if (onEnter) {
      onEnter();
    }
    if (closeAfterMillisecond && this.refs.binary_popover) {
      setTimeout(() => {
        if (ReactDOM.findDOMNode(this.refs.binary_popover) !== null) {
          ReactDOM.findDOMNode(this.refs.binary_popover).style.display = 'none';
        }
      }, closeAfterMillisecond);
    }
  }

  onExit() {
    const {onExit} = this.props;
    if (onExit) {
      onExit();
    }
  }

  handleDocumentClick(event) {
    const {id} = this.props;
    const triggernode = ReactDOM.findDOMNode(this.refs.binary_tooltip);
    const popup = document.getElementById('binary_tooltip_popup_' + id);
    const dropdown = popup !== null && popup.parentNode !== null && popup.parentNode.nextSibling !== null ? popup.parentNode.nextSibling : popup;

    if (triggernode && popup && dropdown) {
      if (!popup.contains(event.target) && !triggernode.contains(event.target) && !dropdown.contains(event.target)) {
        if (!this.state.initialClick) {
          this.setState({ key: Math.random(), initialClick: true }, () => {
            if (document.getElementById('binary_auto_complete') !== null) {
              document.getElementById('binary_tooltip_close').click();
              // document.getElementsByClassName('positive')[0].click();
            }
          });
        } else {
          this.setState({ initialClick: false });
        }
      }
    }
  }

  render() {
    const {node, data, rootClose, onEnter, id, trigger, placement, popOverStyle, showPopup} = this.props;
    return (
      <div style={{display: 'inline'}}>
        <Tooltip key={this.state.key} ref="binary_tooltip">
          {!data && node}
          {trigger && data && showPopup &&
          <OverlayTrigger
            key="overlaytrigger"
            onEnter={this.onEnter.bind(this)}
            placement={placement}
            rootClose={rootClose}
            trigger={trigger}
            onExit={this.onExit.bind(this)}
            overlay={<Popover ref="binary_popover" style={popOverStyle} id={'binary_tooltip_popup_' + id}>
              <TooltipOverlay>{data}</TooltipOverlay>
            </Popover>}
          >
            {node}
          </OverlayTrigger>}
          {!trigger && data &&
          <OverlayTrigger
            key="overlaytrigger"
            onEnter={onEnter ? onEnter.bind(this) : undefined}
            placement={placement}
            rootClose={rootClose}
            overlay={<Popover ref="binary_popover" style={popOverStyle} id={'binary_tooltip_popup_' + id}>
              <TooltipOverlay>{data}</TooltipOverlay>
            </Popover>}
          >
            {node}
          </OverlayTrigger>}
        </Tooltip>
        <div style={{display: 'none'}} id="binary_tooltip_close"></div>
      </div>);
  }
}
