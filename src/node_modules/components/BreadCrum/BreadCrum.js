import React, {Component} from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

const uniqueId = () => Math.random();

const BreadcrumContainer = styled.p`
  width: 100%;
  margin: 10px 0px;
  text-align: left;

  i {
    color: #4E4E4E;
    line-height: 18px;
    position: absolute;
    font-weight: 900;
    margin-left: 2px;
    font-size: 10px;
  }
`;

const BreadcrumItem = styled.span`
  cursor: pointer;
  font-size: 11px;
  margin-right: 15px;
`;

export default class BreadCrum extends Component {

  static propTypes = {
    style: PropTypes.object,
    hierarchy: PropTypes.array.isRequired,
    handleBreadCrumClick: PropTypes.func
  };

  static defaultProps = {
    color: '#6090C3'
  };

  getBreadCrums() {
    const {color, hierarchy, handleBreadCrumClick} = this.props;
    const breadcrums = [];
    let count = 1;
    hierarchy.forEach((item) => {
      if (item) {
        const currHierarchy = hierarchy.slice(0, count);
        let lastitem = false;
        let icon = <i>></i>;
        const style = this.props.style ? Object.assign({}, this.props.style) : {};

        if (count === hierarchy.length) {
          icon = <i></i>;
          lastitem = true;
        }
        if (!handleBreadCrumClick) {
          style.cursor = 'auto';
        }
        if (item.href && item.href !== null) {
          const id = item.name.toLowerCase().split(' ').join('_');
          if (lastitem) {
            style.color = '#000';
          } else {
            style.color = color;
          }

          breadcrums.push(
            <a key={uniqueId()} to={item.href} onClick={item.reload && this.handleReload.bind(this)}>
              <BreadcrumItem
                id={id}
                style={style}
                onClick={this.handleBreadCrumClick.bind(this, currHierarchy)}
              >
                {item.name} {icon}
              </BreadcrumItem>
            </a>
          );
        } else {
          if (lastitem) {
            style.color = '#000';
          } else {
            style.color = color;
          }

          breadcrums.push(
            <BreadcrumItem
              key={uniqueId()}
              style={style}
              id={item.name ? item.name.toLowerCase().split(' ').join('_') : ''}
              onClick={this.handleBreadCrumClick.bind(this, currHierarchy)}
            >
              {item.name} {icon}
            </BreadcrumItem>
          );
        }
      }
      count++;
    });
    return breadcrums;
  }

  handleReload() {
    setTimeout(() => {
      window.location.reload();
    }, 2000);
  }

  handleBreadCrumClick(hierarchy) {
    const {handleBreadCrumClick} = this.props;
    if (handleBreadCrumClick) {
      handleBreadCrumClick(hierarchy);
    }
  }

  render() {
    const breadcrums = this.getBreadCrums();
    return (
      <BreadcrumContainer>
        {breadcrums.length > 1 && this.getBreadCrums()}
      </BreadcrumContainer>
    );
  }
}
